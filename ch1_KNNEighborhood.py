# -*- coding: utf-8 -*-
"""혼공.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_6b1_BSVmY9qaRtxWMl0F0WveeKzrIA
"""

import matplotlib.pyplot as plt

bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.show()

#도미와 빙어 합치기

length=bream_length + smelt_length
weight=bream_weight + smelt_weight

#2차원 배열로 변환
#리스트 내 포

fish_data = [[l,w] for l, w in zip(length, weight) ]

print(fish_data)

#정답 준비 > 지도학습 유형
fish_target = [1]*35 + [0]*14

print(fish_target)

#k-최근접 이웃
from sklearn.neighbors import KNeighborsClassifier

kn=KNeighborsClassifier()

kn.fit(fish_data, fish_target) #모델
kn.score(fish_data, fish_target) #정답과 일치도 확인

kn.predict([[30, 600]]) #sclearn 때문에 2차원 행렬 형태로 넣어야함  # 예측값 도출해줌

#k 매개변수 변경하기 (기본값은 5)
kn30 =KNeighborsClassifier(n_neighbors=30)

kn30.fit(fish_data, fish_target)
kn30.score(fish_data, fish_target)

#번외
kn=KNeighborsClassifier()
kn.fit(fish_data, fish_target)
for n in range(5, 50):
  kn.n_neighbors=n
  score = kn.score(fish_data, fish_target)
  if score <1:
    print(n, score)
    break

